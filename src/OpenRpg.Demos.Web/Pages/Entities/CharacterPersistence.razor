@page "/entities/persistence"

@using OpenRpg.Genres.Characters
@using OpenRpg.Genres.Persistence.Characters
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using OpenRpg.Core.Classes
@using OpenRpg.Core.Types
@using OpenRpg.Genres.Extensions
@using OpenRpg.Genres.Populators.Entity.Stats
@inject DemoCharacterBuilder CharacterBuilder;
@inject ICharacterMapper CharacterMapper;
@inject IEntityStatPopulator StatPopulator;

<Markdown>
   #### Character Persistence
   As mentioned in the advanced stats page, we ideally need to transform the data from what it looks like at runtime to
   something that is more easily serialized and read back in.
   
   An example was shown in the previous section but to assist with common use cases we have some built in models and 
   classes within the `OpenRpg.Genres` library which uses the `DefaultCharacter` and `Default*` objects under the hood
   to convert from the `ICharacter` -> `PersistedCharacter` -> `ICharacter (Really a DefaultCharacter)`
</Markdown>

<br/>

<Markdown>
    #### Implementing Abstract Mapping Classes
    
    The built in classes for mapping from a persisted character back to an `ICharacter` are mainly abstract and require
    you to implement a couple of methods. This is because we do not force any data paradigm upon you, so when going from a 
    `PersistedCharacter` back to an `ICharacter` we need to convert the `RaceTemplateId` back into a fully fledged `IRaceTemplate`.
    
    In the repository for this project you can look in the `OpenRpg.Demos.Infrastructure.Persistence` namespace and see some
    implementations which use the `IRepository` from the `OpenRpg.Data` lib, but ultimately however you do it you need to provide
    an implementation on the mapper on how to resolve the id to the template.
    
    > Some genre libs like Fantasy and SciFi provide some extra implementations on top of the base abstract ones, so keep that in mind.
</Markdown>

<br/>

<Markdown>
   #### Persisting A Character
   
   If we look at this code snippet we can see how to use the built in `PersistedCharacter` model which accepts an `ICharacter`
   and will extract the data that needs persisting from it.
   
   ```csharp
   // Now we can build a character and convert it to the built in CharacterData model
   var randomCharacter = CharacterBuilder.CreateNew().Build();
   var characterData = randomCharacter.ToDataModel();
   ```
   
   Once we are at this stage you can persist the data however you want, try the example below to see it getting put into JSON.
</Markdown>

<br/>

<div class="columns">
    <div class="column is-half">
        <CardSection>
            <a class="button is-info" @onclick="RandomizeCharacter">Regenerate Character</a>
            <BasicCharacter Character="@_randomCharacter"></BasicCharacter>
        </CardSection>
    </div>
    <div class="column is-half">
        <CardSection>
        <pre>
            @_persistedData
        </pre>
        </CardSection>
    </div>
</div>

<br/>

<div class="columns">
    <div class="column is-half">
        <Markdown>
            ## Restoring A Persisted Character
           
            Now we have a `CharacterData` object which purely contains the bits of a character we need to persist we can use an `IMapper`
            implementation to convert the data back into its fully fledged form.
           
            Here is an example of the implementation we use within the demo project to repopulate a character:
           
            ```csharp
            public class DemoCharacterMapper : CharacterMapper
            {
                public IRepository Repository { get; }

                public DemoCharacterMapper(IItemMapper itemMapper, IClassMapper classMapper, IEquipmentMapper equipmentMapper, 
                IInventoryMapper inventoryMapper, IStatPopulator statsPopulator, IRepository repository) 
                : base(itemMapper, classMapper, equipmentMapper, inventoryMapper, statsPopulator)
                { Repository = repository; }

                public override IRaceTemplate GetRaceTemplateFor(int raceTemplateId)
                { return Repository.Get&lt;IRaceTemplate&gt;(raceTemplateId); }
            }
            ```
           
            As you can see we just have to implement the abstract method `GetRaceTemplateFor`, which in this case uses the underlying
            repository object to get the race template from the demos in memory store. So with that out of the way lets look at
            how we use it.
           
            ```csharp
            // The mapper inherits from CharacterMapper which implements ICharacterMapper
            // Its also assumed you would be using DI to inject this in so lets ignore constructor
            var characterMapper = new DemoCharacterMapper(/*...*/);
            var character = characterMapper.Map(characterData);
            ```
           
            Thats it, we now have an `ICharacter` again that we can use!
           
            You can use the example to the side to use this character mapper to turn the `CharacterData` json back
            back into a real character object.
            
            > In the real world you can store it however you want, be it in a database, a file, as xml, binary json etc.
        </Markdown>
    </div>
    <div class="column is-half">
        <CardSection>
            <a class="button is-info" @onclick="ReloadCharacterFromData">Restore Character From Json Data</a>
            <BasicCharacter Character="@_regeneratedCharacter"></BasicCharacter>
        </CardSection>
    </div>
</div>

<br/>

<Markdown>
    #### Persisting Other Things
    
    Now we have covered characters we can also persist other things on the entity, like Equipment, Inventories etc.
    
    > One thing worth noting is that because we have extensible `object` fields on the `Variables` the serialization
    > frameworks may not know how to deserialize the data. In this example we have told `JSON.NET` to keep the type
    > information for any fields that are of type `object` so it knows how to deserialize them, but for maximum
    > compatability and control you can work out what parts of a character you will want to persist and can put
    > them into strongly typed structures rather than how it is done here.
    
    The same approach can be taken for anything, just take the runtime object, extract the State from it into a new 
    object and then write a mapper to rehydrate the data.
    
    > Check out the source code for this project as a basis for basic use cases
</Markdown>

@code {
    private ICharacter _randomCharacter, _regeneratedCharacter;
    private string _persistedData = string.Empty;
    private JsonSerializerSettings _jsonSettings;
    
    protected override void OnInitialized()
    {
        _jsonSettings = new JsonSerializerSettings()
        {
            TypeNameHandling = TypeNameHandling.Objects
        };
        
        RandomizeCharacter();
        ReloadCharacterFromData();
        
        base.OnInitialized();
    }
    
    public void RandomizeCharacter()
    {
        _randomCharacter = CharacterBuilder.CreateNew().Build();
        StatPopulator.Populate(_randomCharacter.Stats, _randomCharacter.GetEffects().ToArray(), null);
        PersistCharacter();
    }
    
    public void PersistCharacter()
    {
        var characterData = _randomCharacter.ToDataModel();
        _persistedData = JsonConvert.SerializeObject(characterData, Formatting.Indented, _jsonSettings);
        StateHasChanged();
    }

    public void ReloadCharacterFromData()
    {
        var data = JsonConvert.DeserializeObject<CharacterData>(_persistedData, _jsonSettings);
        _regeneratedCharacter = CharacterMapper.Map(data);
        StatPopulator.Populate(_regeneratedCharacter.Stats, _regeneratedCharacter.GetEffects().ToArray(), null);
        StateHasChanged();
    }
}