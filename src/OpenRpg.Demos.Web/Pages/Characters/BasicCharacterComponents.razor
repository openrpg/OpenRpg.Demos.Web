@page "/characters/basic-components"
@using OpenRpg.Core.Defaults
@using OpenRpg.Core.Common
@using OpenRpg.Core.Classes
@using OpenRpg.Core.Races

 <Markdown>
   ## Basic Character Components
   So by default in `OpenRpg.Core` there is no notion of a character, we just have the notion of classes, races, effects etc.
   
   So it is generally left up to you to build your character however you see fit, but lets look at the core parts which
   make up a character and then we can look at how to use them together, or even use existing `ICharacter` types from
   extension libraries (i.e `OpenRpg.Fantasy`)
 </Markdown>

<br/>
<div class="columns">
  <div class="column is-half">
      <Markdown>
          ### A Simple Character
          If we want to make a simple character all we need to do is think about what makes a character.

          They would need a name, a race and a class at minimum, so we need to supply an `IRaceTemplate` and an `IClass` as well as the Locale details,
          which we can learn more about below.

          > Locale details are a best practice to include, but wont really apply for player created characters as the player would name the character,
          but in scenarios where you are creating NPC characters ahead of time you may have them use the Locale data rather than hard coded strings.

          #### `IRaceTemplate` and `DefaultRaceTemplate`

          `IRaceTemplate` wraps up the notion of a race, it contains the details of the race and any effects it has, and `DefaultRaceTemplate` is the default implementation
          however you can always make your own implementation if required. Like most **template** objects in the system it will have a list of effects and requirements.

          > The requirements are to allow you to lock certain race choices until criteria have been met, i.e player must complete the game once before they can pick
          a certain race, or you need to unlock a story point, or get a character over level 30 etc. You can mix and match any requirements.

          #### `IClass`, `DefaultClass` and `IClassTemplate` with `DefaultClassTemplate`

          Much like the `IRaceTemplate` the `IClassTemplate` defines the class details, effects and requirements.

          The `IClass` is another layer on top of the template though, as characters class also often has a level associated, but as the templates are seen as blueprints for
          the classes/races, they do not track per character data, so this is where the `IClass` notion comes in, and you can even have a character with multiple classes if
          your game scenario warrants that (which is covered later).

          #### Making the simpler character

          so lets go ahead and make a simple character class using the pre-made components within OpenRpg.

          ```csharp
          class SimpleCharacter : IHasLocaleDescription, IHasClass
          {
          public string NameLocaleId { get; set; }
          public string DescriptionLocaleId { get; set; }
          public IRaceTemplate Race { get; set; }
          public IClass Class { get; set; }
          }
          ```
          This is a bit barebones but lets create one of these and see what it looks like using the built in default class/race objects.
          ```csharp
          new SimpleCharacter
          {
          NameLocaleId = "Frodo Baggins", // This should ideally be a locale id
          Race = new DefaultRaceTemplate { NameLocaleId = "Hobbit" }, // A hobbit?
          Class = new DefaultCharacterClass(1, new DefaultClassTemplate { NameLocaleId = "Fighter" }) // Closest class I can think of
          }
          ```
      </Markdown>
  </div>
  <div class="column is-half">
      <CardSection>
          <CharacterDetails Name="@SimpleExample.NameLocaleId" RaceTemplate="@SimpleExample.Race" Class="@SimpleExample.Class"></CharacterDetails>
      </CardSection>
  </div>
</div>
<div class="columns">
  <div class="column is-half">
    <Markdown>
      ### BUT I NEED MORE CLASSES?!?!
      You may have noticed that the level is associated with class and not character. This may seem a bit odd but this 
      is to account for those scenarios where you may have multi-class scenarios or want to be able to sub class etc.
      
      So lets assume our buddy Frodo has got a prestige class of some kind known as *Ring Bearer* and hes leveled up a bit
      how would our character change to reflect this?

      ```csharp
      class MultiClassCharacter : IHasLocaleDescription, IHasMultiClass
      {
        public string NameLocaleId { get; set; }
        public string DescriptionLocaleId { get; set; }
        public IRaceTemplate Race { get; set; }
        public IEnumerable&lt;IClass&gt; Classes { get; set; }
      }
      ```
      So lets make one of these and see how Frodo has developed
      ```csharp
      new MultiClassCharacter 
      {
        NameLocaleId = "Frodo Baggins", // This should ideally be a locale id
        Race = new DefaultRaceTemplate { NameLocaleId = "Hobbit" }, // A hobbit?
        Classes = new[]
        {
          new DefaultCharacterClass(2, new DefaultClassTemplate {NameLocaleId = "Fighter"}), // Leveled Up
          new DefaultCharacterClass(1, new DefaultClassTemplate {NameLocaleId = "Wraith"}), // oh noes
          new DefaultCharacterClass(4, new DefaultClassTemplate {NameLocaleId = "Ring Bearer"}) // Multi classed
        }
      }
      ```
      
      Boom and there we go, we can now see that he has multiple classes assigned.
      
      Move onto the stats page for more information on characters.
    </Markdown>
  </div>
    <div class="column is-half">
        <CardSection>
            <CharacterDetails Name="@MultiClassExample.NameLocaleId" RaceTemplate="@MultiClassExample.Race" Classes="@MultiClassExample.Classes"></CharacterDetails>
        </CardSection>
    </div>
</div>

@code {

  public class SimpleCharacter : IHasLocaleDescription, IHasClass
  {
    public string NameLocaleId { get; set; }
    public string DescriptionLocaleId { get; set; }
    public IRaceTemplate Race { get; set; }
    public IClass Class { get; set; }
  }
  
  private SimpleCharacter SimpleExample = new SimpleCharacter();
  
  public class MultiClassCharacter : IHasLocaleDescription, IHasMultiClass
  {
    public string NameLocaleId { get; set; }
    public string DescriptionLocaleId { get; set; }
    public IRaceTemplate Race { get; set; }
    public IEnumerable<IClass> Classes { get; set; }
  }
  
  private MultiClassCharacter MultiClassExample = new MultiClassCharacter();

  protected override void OnInitialized()
  {
    SimpleExample.NameLocaleId = "Frodo Baggins";
    SimpleExample.Race = new DefaultRaceTemplate { NameLocaleId = "Hobbit" };
    SimpleExample.Class = new DefaultCharacterClass(1, new DefaultClassTemplate { NameLocaleId = "Fighter" });
    
    MultiClassExample.NameLocaleId = "Frodo Baggins";
    MultiClassExample.Race = new DefaultRaceTemplate { NameLocaleId = "Hobbit" };
    MultiClassExample.Classes = new[]
    {
      new DefaultCharacterClass(2, new DefaultClassTemplate {NameLocaleId = "Fighter"}),
      new DefaultCharacterClass(1, new DefaultClassTemplate {NameLocaleId = "Wraith"}),
      new DefaultCharacterClass(4, new DefaultClassTemplate {NameLocaleId = "Ring Bearer"}),
    };

    base.OnInitialized();
  }

}