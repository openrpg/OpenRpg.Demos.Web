@page "/characters/advanced-stats"
@using OpenRpg.Core.Defaults
@using OpenRpg.Core.Effects
@using OpenRpg.Core.Stats
@using OpenRpg.Genres.Fantasy.Defaults
@using OpenRpg.Genres.Fantasy.Extensions
@using OpenRpg.Genres.Fantasy.Types

<Markdown>
   ## Advanced Stats
   Now that we have covered the basics around dynamic stats based off effects its time to dive a bit deeper into this topic.
   
   As you have seen your stats can be seen as a culmination of all effects on you, and at the moment we have added effects at
   race and class level as well as providing manual effects on the character, but in the real world you may want to get 
   effects from equipment, buffs, multi classing etc.
   
   We also haven't discussed the notion of static vs dynamic stats, so for example your max health can be seen as static as 
   its computed once and possibly recomputed on effect changes etc, but your ACTUAL HEALTH value can change from various factors
   such as being hit, drinking a potion, being poisoned etc, so some stats can be seen as static and some as dynamic.
</Markdown>

<br/>

<Markdown>
  ## Static vs Dynamic Stats
  You don't need to worry too much about this stuff, and really stats are just stats, the static ones are treated no differently
  to dynamic ones in terms of how they are stored (in the `EntityStats` object). However conceptually they differ quite a bit.
   
  So like mentioned above MaxHealth can be seen as static and Health can be seen as dynamic, and this becomes important when
  we think about how we want to save/load our characters.
   
  We could simply just dump the whole character object into JSON or some other format and load it back in and call it a day,
  but this can cause you issues down the line. For example lets say you save your character on v1.0 of your game by dumping
  the character and all stats. Then an update comes along for v1.1 which adds a new +10 maxhp bonus to your race, you get 
  the update and boot up your game loading your save and you dont have this bonus maxhp as your character had its maxhp baked 
  into the save.
   
  To get around this we try to think about static vs dynamic in persistence terms and you generally want to cull all static
  data on persistence actions as it should all be regenerated when the character is loaded in, the only data that REALLY needs
  persisting from the stats is dynamic data like Health and Magic and any other dynamic stats you add.
   
</Markdown>

<br/>

<Markdown>
   ## General Persistence Thoughts
   So while we are discussing persistence its worth saying that in most cases you want to create an object which encapsulates
   the key aspects of a character. In the above example where we dumped everything its a massive waste as we are saving race,
   class, effect, stat data as well as potentially other guff in real world scenarios.
   
   So it is best to create a separate model which would contain the key bits we care about:
   
   ```csharp
   public class PersistedCharacter : IHasLocaleDescription
   {
      public string NameLocaleId { get; set; }        // These may not be locale ids if you let players name your character
      public string DescriptionLocaleId { get; set; }
      public int RaceId { get; set; }
      public int ClassLevels { get; set; }
      public int ClassId { get; set; }
      public int Health { get; set; }  
      public int Magic { get; set; }
      // Maybe custom effects if you do not generate them each time on char creation 
   }
   ```
   
   The main thing to look at above is that the Race, Class are stored as Ids so they can be used to lookup the race/class
   data when the save is loaded, this way your save files are lightweight and do not contain any data that can be regenerated.
   
   Also with this approach we solve the previous v1.0 -> v1.1 problem, as we would load up the `PersistedCharacter` then
   use those details to build back up the `AutoStatsCharacter` and we can regenerate the stats, which would give us our
   new improved MaxHp then we just manually overwrite the `character.Stats.Health(persistedCharacter.Health)` etc.
</Markdown>

@code {

}