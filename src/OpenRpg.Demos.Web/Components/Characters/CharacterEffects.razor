@using OpenRpg.Core.Stats
@using OpenRpg.Genres.Fantasy.Extensions
@using OpenRpg.Core.Effects
@using OpenRpg.Genres.Fantasy.Types
@using System.Reflection
@using OpenRpg.Demos.Web.Extensions

@if (Effects != null && Effects.Count > 0)
{
    <div class="content is-small has-text-centered">
        @foreach (var effect in Effects)
        {
            <li style="list-style: none;">@(GetPotencySymbol(effect.Potency))@(effect.Potency) @GetEffectText(effect.EffectType)</li>
        }
    </div>
}

@code {
    [Parameter]
    public IReadOnlyCollection<Effect> Effects { get; set; }

    private int[] _percentageEffectTypeCache;
    private IDictionary<int, string> _effectTypeTextCache;
    private static readonly string[] _wordRemovals = new[] { "BonusAmount", "Amount", "Percentage" };

    protected override void OnInitialized()
    {
        // You could easily add other types in if you had custom ones
        _percentageEffectTypeCache = GetAllPercentageEffectTypeIds(typeof(EffectTypes));
        _effectTypeTextCache = GetAllEffectTypeText(typeof(EffectTypes));
        base.OnInitialized();
    }

    private int[] GetAllPercentageEffectTypeIds(Type effectTypes)
    {
        return effectTypes
            .GetFields(BindingFlags.Public | BindingFlags.Static)
            .Where(x => x.Name.Contains("Percentage"))
            .Select(x => (int)x.GetValue(null))
            .ToArray();
    }

    private IDictionary<int, string> GetAllEffectTypeText(Type effectTypes)
    {

        return effectTypes
            .GetFields(BindingFlags.Public | BindingFlags.Static)
            .ToDictionary(x => (int)x.GetValue(null), x => x.Name.ReplaceAll(_wordRemovals, "").UnPascalCase());
    }

    public bool IsPercentageEffect(int effectType)
    { return _percentageEffectTypeCache.Contains(effectType); }

    public string GetEffectText(int effectType)
    { return _effectTypeTextCache.ContainsKey(effectType) ? _effectTypeTextCache[effectType] : "Unknown"; }

    public string GetPotencySymbol(float potency)
    { return potency > 0 ? "+" : "-"; }

}