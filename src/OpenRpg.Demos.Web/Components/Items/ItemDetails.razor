@using OpenRpg.Core.Races
@using OpenRpg.Core.Classes
@using OpenRpg.Core.Effects
@using OpenRpg.Demos.Infrastructure.Locale
@using OpenRpg.Genres.Fantasy.Types
@using OpenRpg.Items
@using OpenRpg.Items.Extensions
@using OpenRpg.Items.Templates
@using OpenRpg.Items.Types
@using System.Transactions
@using OpenRpg.Demos.Infrastructure.Extensions
@using OpenRpg.Genres.Characters
@using OpenRpg.Genres.Extensions
@using OpenRpg.Genres.Fantasy.Extensions
@using OpenRpg.Genres.Fantasy.Requirements
@using OpenRpg.Genres.Requirements

@inject DefaultLocaleRepository LocaleRepository;
@inject ICharacterRequirementChecker RequirementsChecker

<CardSection customClasses="@cardClasses">
    <h4 class="title is-4 has-text-centered item-quality-@(_itemQualityTypeId)">@(Item.ItemTemplate.NameLocaleId ?? "Unnamed Item")</h4>
    @if (!string.IsNullOrEmpty(Item.ItemTemplate.DescriptionLocaleId))
    {
        <h6 class="subtitle is-7 has-text-dark has-text-centered">@(Item.ItemTemplate.DescriptionLocaleId)</h6>
    }
    <div class="columns">
        <div class="column">
            <figure class="image is-64x64 item-border with-rounding item-quality-@(_itemQualityTypeId)">
                <img src="images/items/@(Item.ItemTemplate.Variables.AssetCode()).png">
            </figure>
        </div>
        <div class="column">
            @if (IsWeapon)
            {
                <h4 class="title is-4 has-text-dark has-text-centered">@(Item.ItemTemplate.Effects.Where(x => x.EffectType == EffectTypes.PureDamageAmount).Sum(x => x.Potency))</h4>
                <h6 class="subtitle is-7 has-text-dark has-text-centered">Damage</h6>
            }
            @if (IsArmour)
            {
                <h4 class="title is-4 has-text-dark has-text-centered">@(Item.ItemTemplate.Effects.Where(x => x.EffectType == EffectTypes.PureDefenseAmount).Sum(x => x.Potency))</h4>
                <h6 class="subtitle is-7 has-text-dark has-text-centered">Defense</h6>
            }
        </div>
        <div class="column">
            @if (_itemQualityTypeId != 0)
            {
                <h6 class="subtitle is-5 has-text-dark has-text-centered mb-1">@(LocaleRepository.Retrieve(DefaultLocaleRepository.GetKeyFor(DefaultLocaleRepository.ItemQualityTextKey, _itemQualityTypeId)))</h6>
            }
            <h6 class="subtitle is-6 has-text-dark has-text-centered">@(LocaleRepository.Retrieve(DefaultLocaleRepository.GetKeyFor(DefaultLocaleRepository.ItemTypesTextKey, Item.ItemTemplate.ItemType)))</h6>
        </div>
    </div>
    @if (DisplayEffects.Any())
    {
        <h5 class="title is-5 has-text-centered has-text-dark mb-1 mt-1">Effects</h5>
        <div>
            <EffectList Effects="DisplayEffects.ToArray()" Character="@Character"></EffectList>
        </div>
    }
    @if (Item.ItemTemplate.Requirements.Any())
    {
        <h5 class="title is-5 has-text-centered has-text-dark mb-1 mt-3">Requirements</h5>
        <div>
            <RequirementList Requirements="@Item.ItemTemplate.Requirements.ToArray()" Character="@Character"></RequirementList>
        </div>
    }
</CardSection>

@code {

    [Parameter]
    public IItem Item { get; set; }

    [Parameter]
    public ICharacter Character { get; set; }

    private bool IsWeapon => Item.ItemTemplate.ItemType == ItemTypes.GenericWeapon;

    private bool IsArmour
    {
        get
        {
            var type = Item.ItemTemplate.ItemType;
            return type == ItemTypes.BackArmour ||
                   type == ItemTypes.FootArmour ||
                   type == ItemTypes.HeadItem ||
                   type == ItemTypes.WristItem ||
                   type == ItemTypes.LowerBodyArmour ||
                   type == ItemTypes.UpperBodyArmour;
        }
    }

    private IEnumerable<Effect> DisplayEffects
    {
        get
        {
            if (IsWeapon) { return Item.ItemTemplate.Effects.Where(x => x.EffectType != EffectTypes.PureDamageAmount); }
            if (IsArmour) { return Item.ItemTemplate.Effects.Where(x => x.EffectType != EffectTypes.PureDefenseAmount); }
            return Item.ItemTemplate.Effects;
        }
    }

    private int _itemQualityTypeId;
    private string cardClasses;

    protected override void OnParametersSet()
    {

        var areRequirementsMet = RequirementsChecker.AreRequirementsMet(Character, Item.ItemTemplate);
        var requirementsClass = !areRequirementsMet ? "has-background-danger-light" : "";
        cardClasses = $"item-border item-quality-{_itemQualityTypeId} {requirementsClass}";

        base.OnParametersSet();
    }


    protected override void OnInitialized()
    {
        if (Item.ItemTemplate.Variables.ContainsKey(ItemTemplateVariableTypes.QualityType))
        { _itemQualityTypeId = Item.ItemTemplate.Variables.QualityType(); }

    }

}